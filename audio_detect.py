# -*- coding: utf-8 -*-
"""audio_detect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j7dSrjByGhCRMtcYSkpb4KRht3l2I7Qm
"""

!gdown 1R_JfPLco6WDj4BTabH0SYiqhwgBNGiRW
!unzip classification_dataset.zip

AUDIO_DIR = "/content/audio_train/train"      # Папка с wav файлами
CSV_PATH = "/content/train.csv"          # CSV с колонками: fname,label

"""# Установка зависимостей и импорт библиотек"""

# Импорт основных библиотек
import pandas as pd
import os
import random
import numpy as np
from tqdm.notebook import tqdm  # Используем tqdm.notebook для лучшего отображения в Colab

# Импорт библиотек для работы с аудио и PyTorch
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader, WeightedRandomSampler
import torchaudio
from torchaudio.transforms import MelSpectrogram, Resample, FrequencyMasking, TimeMasking

# Импорт утилит для машинного обучения
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import f1_score, classification_report, confusion_matrix

# Импорт для работы с моделями и визуализацией
from torchvision import models, transforms
import matplotlib.pyplot as plt
import seaborn as sns

"""# Конфигурация проекта"""

SAMPLE_RATE = 22050
N_MELS = 128
MAX_LENGTH = 128
BATCH_SIZE = 32
NUM_EPOCHS = 50
LR = 1e-3
PATIENCE = 8
DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
BEST_MODEL_PATH = "best_efficientnet_audio.pth"

print(f"Используемое устройство: {DEVICE}")

"""# Загрузка и предварительная обработка данных"""

df = pd.read_csv(CSV_PATH)
label_encoder = LabelEncoder()
df['label_encoded'] = label_encoder.fit_transform(df['label'])
NUM_CLASSES = len(label_encoder.classes_)

train_df, valid_df = train_test_split(
    df, test_size=0.2, stratify=df['label'], random_state=42
)

print(f"Количество классов: {NUM_CLASSES}")
print(f"Классы: {label_encoder.classes_}")
print(f"Размер обучающей выборки: {len(train_df)}")
print(f"Размер валидационной выборки: {len(valid_df)}")

class AudioDataset(Dataset):
    def __init__(self, df, audio_dir, is_train=True, sample_rate=22050, n_mels=128, max_length=128):
        self.df = df
        self.audio_dir = audio_dir
        self.is_train = is_train
        self.sample_rate = sample_rate
        self.n_mels = n_mels
        self.max_length = max_length

        self.mel_spectrogram = MelSpectrogram(
            sample_rate=sample_rate, n_fft=2048, hop_length=512, n_mels=n_mels
        )
        self.resampler_cache = {}
        self.time_masking = TimeMasking(time_mask_param=30)
        self.freq_masking = FrequencyMasking(freq_mask_param=15)

    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        row = self.df.iloc[idx]
        audio_path = os.path.join(self.audio_dir, row['fname'])
        label = row['label_encoded']

        try:
            waveform, sr = torchaudio.load(audio_path)
        except Exception as e:
            print(f"Error loading file {audio_path}: {e}")
            return torch.zeros(3, self.n_mels, self.max_length), -1

        if sr != self.sample_rate:
            if sr not in self.resampler_cache:
                self.resampler_cache[sr] = Resample(orig_freq=sr, new_freq=self.sample_rate)
            waveform = self.resampler_cache[sr](waveform)

        mel_spec = self.mel_spectrogram(waveform)

        if self.is_train:
            mel_spec = self.time_masking(mel_spec) if torch.rand(1) > 0.5 else self.freq_masking(mel_spec)

        log_mel_spec = torch.log(mel_spec + 1e-9)

        if log_mel_spec.shape[2] > self.max_length:
            log_mel_spec = log_mel_spec[:, :, :self.max_length]
        else:
            pad_size = self.max_length - log_mel_spec.shape[2]
            log_mel_spec = torch.nn.functional.pad(log_mel_spec, (0, pad_size))

        log_mel_spec = log_mel_spec.repeat(3, 1, 1)
        return log_mel_spec, label

class_counts = train_df['label_encoded'].value_counts().to_dict()
class_weights = {cls: 1. / count for cls, count in class_counts.items()}
sample_weights = [class_weights[cls] for cls in train_df['label_encoded']]
sampler = WeightedRandomSampler(sample_weights, len(sample_weights), replacement=True)

# ==== Collate Function ====
def collate_fn(batch):
    batch = [(s, l) for s, l in batch if l != -1]
    if not batch:
        return torch.tensor([]), torch.tensor([])
    specs, labels = zip(*batch)
    specs = torch.stack(specs)
    labels = torch.tensor(labels)
    return specs, labels

# ==== DataLoader'ы ====
train_dataset = AudioDataset(train_df, AUDIO_DIR, is_train=True, sample_rate=SAMPLE_RATE, n_mels=N_MELS, max_length=MAX_LENGTH)
valid_dataset = AudioDataset(valid_df, AUDIO_DIR, is_train=False, sample_rate=SAMPLE_RATE, n_mels=N_MELS, max_length=MAX_LENGTH)

train_loader = DataLoader(
    train_dataset, batch_size=BATCH_SIZE, sampler=sampler, num_workers=2, collate_fn=collate_fn, pin_memory=True
)
valid_loader = DataLoader(
    valid_dataset, batch_size=BATCH_SIZE*2, shuffle=False, num_workers=2, collate_fn=collate_fn, pin_memory=True
)

"""# Определение модели"""

class AudioEfficientNet(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.base = models.efficientnet_b3(weights=models.EfficientNet_B3_Weights.DEFAULT)
        self.base.classifier[1] = nn.Linear(self.base.classifier[1].in_features, num_classes)
        self.preprocess = transforms.Compose([
            transforms.Resize((224, 224), antialias=True),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ])

    def forward(self, x):
        x = self.preprocess(x)
        return self.base(x)

"""# Инициализация модели и инструментов для обучения"""

model = AudioEfficientNet(NUM_CLASSES).to(DEVICE)
criterion = nn.CrossEntropyLoss()
optimizer = optim.AdamW(model.parameters(), lr=LR)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'max', patience=2, verbose=True, factor=0.2)

"""# Основной цикл обучения и валидации"""

best_f1 = 0.0
patience_counter = 0

# Для хранения истории обучения
history = {
    'train_loss': [], 'val_loss': [], 'train_f1': [], 'val_f1': []
}


for epoch in range(NUM_EPOCHS):
    print(f"\nEpoch {epoch+1}/{NUM_EPOCHS}")
    model.train()
    running_loss = 0.0
    y_true, y_pred = [], []

    for specs, labels in tqdm(train_loader, desc='Train'):
        if specs.numel() == 0: continue # Пропускаем пустые батчи
        specs, labels = specs.to(DEVICE), labels.to(DEVICE)

        optimizer.zero_grad()
        outputs = model(specs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item() * specs.size(0)
        preds = torch.argmax(outputs, 1).cpu().numpy()
        y_pred.extend(preds)
        y_true.extend(labels.cpu().numpy())

    train_loss = running_loss / len(train_loader.sampler)
    train_f1 = f1_score(y_true, y_pred, average="macro")
    history['train_loss'].append(train_loss)
    history['train_f1'].append(train_f1)
    print(f"Train loss: {train_loss:.4f} | Train F1: {train_f1:.4f}")

    # Validation
    model.eval()
    val_loss = 0.0
    val_true, val_pred = [], []
    with torch.no_grad():
        for specs, labels in tqdm(valid_loader, desc='Valid'):
            if specs.numel() == 0: continue
            specs, labels = specs.to(DEVICE), labels.to(DEVICE)

            outputs = model(specs)
            loss = criterion(outputs, labels)

            val_loss += loss.item() * specs.size(0)
            preds = torch.argmax(outputs, 1).cpu().numpy()
            val_pred.extend(preds)
            val_true.extend(labels.cpu().numpy())

    val_loss /= len(valid_loader.dataset)
    val_f1 = f1_score(val_true, val_pred, average="macro")
    history['val_loss'].append(val_loss)
    history['val_f1'].append(val_f1)
    print(f"Valid loss: {val_loss:.4f} | Valid F1: {val_f1:.4f}")

    scheduler.step(val_f1)

    # Early stopping
    if val_f1 > best_f1:
        best_f1 = val_f1
        patience_counter = 0
        torch.save(model.state_dict(), BEST_MODEL_PATH)
        print("Model saved.")
    else:
        patience_counter += 1
        if patience_counter >= PATIENCE:
            print("Early stopping!")
            break

    # Остановить обучение, если достигли целевой метрики
    if val_f1 >= 0.64:
        print("Target F1 reached!")

print("\nОбучение завершено.")
print(f"Лучший F1-score на валидации: {best_f1:.4f}")

# Загружаем лучшую модель для финальной оценки
model.load_state_dict(torch.load(BEST_MODEL_PATH))
model.eval()

# Финальный classification_report для лучшей модели
# (Пересчитываем на случай, если обучение остановилось не на лучшей эпохе)
final_val_true, final_val_pred = [], []
with torch.no_grad():
    for specs, labels in tqdm(valid_loader, desc='Final Eval'):
        if specs.numel() == 0: continue
        specs, labels = specs.to(DEVICE), labels.to(DEVICE)
        outputs = model(specs)
        preds = torch.argmax(outputs, 1).cpu().numpy()
        final_val_pred.extend(preds)
        final_val_true.extend(labels.cpu().numpy())

print("\nИтоговый отчет по классификации (для лучшей модели):")
print(classification_report(final_val_true, final_val_pred, target_names=label_encoder.classes_))

"""# Функции для визуализации"""

def plot_history(history):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
    ax1.plot(history['train_loss'], label='Train Loss', color='blue')
    ax1.plot(history['val_loss'], label='Validation Loss', color='orange')
    ax1.set_title('Loss Over Epochs'); ax1.set_xlabel('Epoch'); ax1.set_ylabel('Loss')
    ax1.legend(); ax1.grid(True)
    ax2.plot(history['train_f1'], label='Train F1-macro', color='blue')
    ax2.plot(history['val_f1'], label='Validation F1-macro', color='orange')
    ax2.set_title('F1-score (macro) Over Epochs'); ax2.set_xlabel('Epoch'); ax2.set_ylabel('F1-score')
    ax2.legend(); ax2.grid(True)
    plt.show()

def plot_confusion_matrix(y_true, y_pred, classes):
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(12, 10))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)
    plt.title('Confusion Matrix'); plt.xlabel('Predicted Label'); plt.ylabel('True Label')
    plt.show()

def show_predictions(model, dataset, label_encoder, num_examples=5):
    model.to(DEVICE).eval()
    print("\n==== Наглядные тесты ====")
    indices = random.sample(range(len(dataset)), num_examples)
    for i, idx in enumerate(indices):
        spec, label_idx = dataset[idx]
        with torch.no_grad():
            output = model(spec.unsqueeze(0).to(DEVICE))
            pred_idx = torch.argmax(output, 1).item()
        actual_label = label_encoder.inverse_transform([label_idx])[0]
        predicted_label = label_encoder.inverse_transform([pred_idx])[0]
        plt.figure(figsize=(8, 4))
        plt.imshow(spec[0].cpu().numpy(), aspect='auto', origin='lower', cmap='viridis')
        plt.colorbar(format='%+2.0f dB')
        is_correct = (actual_label == predicted_label)
        title_color = 'green' if is_correct else 'red'
        plt.title(f"Пример {i+1}: Реальный: '{actual_label}' | Предсказание: '{predicted_label}'", color=title_color)
        plt.tight_layout(); plt.show()

"""# Анализ результатов и тестирование"""

# Загружаем лучшую модель
model.load_state_dict(torch.load(BEST_MODEL_PATH))
model.eval()

# Финальная оценка на валидационной выборке
final_val_true, final_val_pred = [], []
with torch.no_grad():
    for specs, labels in tqdm(valid_loader, desc='Final Eval'):
        if specs.numel() == 0: continue
        specs, labels = specs.to(DEVICE), labels.to(DEVICE)
        outputs = model(specs)
        final_val_pred.extend(torch.argmax(outputs, 1).cpu().numpy())
        final_val_true.extend(labels.cpu().numpy())

print("\nИтоговый отчет по классификации (для лучшей модели):")
print(classification_report(final_val_true, final_val_pred, target_names=label_encoder.classes_))

# 1. Графики обучения
plot_history(history)

# 2. Матрица ошибок
plot_confusion_matrix(final_val_true, final_val_pred, label_encoder.classes_)

# 3. Наглядные примеры
show_predictions(model, valid_dataset, label_encoder, num_examples=5)